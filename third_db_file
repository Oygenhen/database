---1.Написать DML-триггер, регистрирующий изменение данных (вставку, обновление, удаление) в одной из таблиц БД.
---Во вспомогательную таблицу LOGI записывать, кто, когда (дата и время), и какое число изменение произвел,
---для одного из столбцов сохранять старые иновые значения.
---(таблица Landlords)
---(сохранение старого и нового номера телефона арендодателя)

create table LOGI(
	userl varchar2(50),
	datel DATE,
	operat char(6),
	old_tel char(18) unique,
	new_tel char(18) unique
	);
	
create or replace trigger dml_trigger
	after insert or update or delete
	on Landlords
	for each row
	
	declare 
	param char(6);
	old_value char(18);
	new_value char(18);
	
	
	
	begin 
		case
			when INSERTING
				then param:='Insert';
				new_value:=:NEW.tel_no;
			when UPDATING
				then param:='Update';
				old_value:=:OLD.tel_no;
				new_value:=:NEW.tel_no;
			when DELETING
				then param:='Delete';
				old_value:=:OLD.tel_no;
				
		end case;
			insert into LOGI(userl, datel, operat, old_tel, new_tel) values (user, to_date(SYSDATE, 'DD.MM.YYYY:HH24:MI:SS'), param, old_value, new_value);
	end dml_trigger;
/


INSERT INTO Landlords  VALUES (11,'Petrosan', 'Dmitry', 'Genadevich', 'male', '+375(29)382-32-64', 'AB4729349', 'petrovich@gmail');
update Landlords set tel_no= '+375(29)346-42-70' where lno=11;
delete from Landlords where lno = 11;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
---2. Написать DDL-триггер, протоколирующий действия пользователей по созданию, изменению и удалению таблиц в схеме во вспомогательную таблицу LOC2
---в определенное время  и запрещающий эти действия в другое время.


create table LOG2(
	userl varchar2(70),
	datel DATE,
	action varchar2(6),
    change_table varchar2(20)
	);

create or replace trigger ddl_trigger
	before create or alter or drop
	on schema
	
	declare
		param char(6);
		
	begin
	
		if TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))<'22' and TO_NUMBER(TO_CHAR(SYSDATE, 'HH24'))>'18'
			then
				insert into LOG2(userl,datel, action, change_table) values (user, SYSDATE, ora_sysevent, ora_dict_obj_name);
		else
		RAISE_APPLICATION_ERROR(
          num=>-20020,
          msg=>'В данное время запрещено производить такие действия!');
		
		end if;
	end ddl_trigger;
/

--Изменить имя таблицы без реального переноса физической информации в БД
ALTER TABLE Under RENAME TO Underground;
 
create table districts_of_Minsk(
mno integer,
name varchar2(50)
);

---3. Написать системный триггер, добавляющий запись во вспомогательную таблицу LOG3, когда пользователь подключается или отключается.
---В таблицу логов записывается имя пользователя (USER), тип активности (LOGON или LOGOFF), дата (SYSDATE), количество записей в оснвой таблице БД.


create table LOG3(
	userl varchar2(70),
	act_type varchar2(6),
	datel DATE,
	rec_numb number
	);

create or replace trigger sys_triggerON
after LOGON
	on schema
	
	declare
	count_lines number(5);
	
	begin
		select count(*) into count_lines from Deals;
		insert into LOG3(userl, act_type, datel, rec_numb)
			values(user, 'LOGON', SYSDATE, count_lines);
	end;
	/
	
	
create or replace trigger sys_triggerOF
before LOGOFF
	on schema
	
	declare
	count_lines number(5);
	
	begin
		select count(*) into  count_lines from Deals;
		insert into LOG3(userl, act_type, datel,rec_numb)
			values(user, 'LOGOFF', SYSDATE, count_lines);
	end;
	/
	


---4. Написать триггеры, реализующие бизнес-логику (ограничения) в заданной вариантом предметной области. Три задания приведены в прил. 6.
---Количесто и тип триггеров (строковый или операторный, выполняется AFTER или BEFORE) определять самостоятельно исходя из сути заданной и имеющейся схемы БД:
---учесть, что в некоторых вариантах первые два задания могут быть выполнены в рамках одного триггера, а также возможно возникновение мутации, что приведет к
---совмещению данного пункта лабораторной работы со следующим. Третий пункт задания предполагает использование планировщика задач, который обязательно должен
---быть настроен на многократный запуск с использованием частоты, интервала и спецификаторов.

---1.При занятости квартиры предлагать похожую

create or replace trigger T
after LOGON
	on schema
	
	declare
	count_lines number(5);
	
	begin
		select count(*) into count_lines from Deals;
		insert into LOG3(userl, act_type, datel, rec_numb)
			values(user, 'LOGON', SYSDATE, count_lines);
	end;
	/








---6. Написать триггер INSTEAD OF для работы с необновляемым представлением, созданным после выполнения п.2 задания к лабороторной работе №3, проверить DML-командами
---возможность обновления представления до и после включения триггера

---Вывести данные арендодателей (ФИО и пол), имя которых совпда-ет с именем арендаторов
CREATE OR REPLACE VIEW Inf_Landlords AS
SELECT l.fname, l.lname, l.patronimic, l.sex 
FROM Landlords l
JOIN Tenants t ON t.lname=l.lname;

SELECT * FROM Inf_Landlords;

    fname     lname                         patronimic         sex             
---------- ------------------------------ ----------------- --------- 
  Nevdakh      Sergey                        Vasilievich      male
  
  
create or replace trigger update_view
	INSTEAD OF INSERT
	on Inf_Landlords
	for each row
	
	declare 
	k integer;
	t integer;
	patronimic_ integer;
	
	begin 
		select count(*) into k from Landlords where lno =:NEW.lno;
		
		if k = 0 then
			insert into Landlords(
	
	
   
   
 

-----------------------------------------------------------------------------------------------------------------
create or replace trigger Deal
	before insert or update on Deals
for each row

	begin
	    if :new.end_of_lease < TO_DATE(SYSDATE+2, 'DD.MM.YYYY') then
		:new.end_of_lease:=null;
		dbms_output.enable;
		dbms_output.put_line('Квартира не сдается меньшеБ чем на сутки, пожалуйста, введите новую дату! ');
	    end if;
end Deal;
/



insert Into Deals values (16, 4, 6, 7, TO_DATE(SYSDATE,  'DD.MM.YYYY'), TO_DATE(SYSDATE+7, 'DD.MM.YYYY'),110);

